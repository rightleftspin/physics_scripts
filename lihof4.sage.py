

# This file was *autogenerated* from the file lihof4.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_5p53 = RealNumber('5.53'); _sage_const_5en2 = RealNumber('5e-2'); _sage_const_11p5 = RealNumber('11.5'); _sage_const_6 = Integer(6); _sage_const_0p01 = RealNumber('0.01'); _sage_const_2 = Integer(2); _sage_const_1en6 = RealNumber('1e-6')
from sage.all import *
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
def printa(thing_to_print):
	print(ascii_art(thing_to_print))

delta, g_l, mu_b, B_x, alpha, rho, beta = var('delta g_l mu_b B_x alpha rho beta', domain='positive')

jz_m, jx_m, jy_m = var('jz_m jx_m jy_m', domain='positive')

wx, wz = var('wx wz', domain='real')

jz = Matrix(((-alpha, _sage_const_0 , _sage_const_0 ), (_sage_const_0 , alpha, _sage_const_0 ), (_sage_const_0 , _sage_const_0 , _sage_const_0 )))
jx = Matrix(((_sage_const_0 , _sage_const_0 , rho), (_sage_const_0 , _sage_const_0 , rho), (rho, rho, _sage_const_0 )))
jy = Matrix(((_sage_const_0 , _sage_const_0 , -I * rho), (_sage_const_0 , _sage_const_0 , I * rho), (I * rho, -I * rho, _sage_const_0 )))

v_c = Matrix(((_sage_const_0 , _sage_const_0 , _sage_const_0 ), (_sage_const_0 , _sage_const_0 , _sage_const_0 ), (_sage_const_0 , _sage_const_0 , delta)))

full_hamil = v_c + -B_x * jx + wx * jx_m * jx + wx * jy_m * jy + wz * jz_m * jz

# For B_x = 0
Z = exp(-beta * full_hamil.substitute(jx_m = _sage_const_0 , jy_m = _sage_const_0 , B_x = _sage_const_0 )).trace()

mag = ((_sage_const_1 /Z) * (jz * exp(-beta * full_hamil.substitute(jx_m = _sage_const_0 , jy_m = _sage_const_0 , B_x = _sage_const_0 ))).trace()).substitute(alpha = _sage_const_5p53 , wz = -_sage_const_5en2 , delta=_sage_const_11p5 )

__tmp__=var("jz_m,beta"); mag_func = symbolic_expression(mag - jz_m).function(jz_m,beta)

mag_func_output = [[], []]

for j in srange(_sage_const_0 , _sage_const_6 , _sage_const_0p01 ):
	for t in srange(_sage_const_0p01 , _sage_const_2 , _sage_const_0p01 ):
		if abs(mag_func(j, (_sage_const_1 /t))) < _sage_const_1en6 :
			mag_func_output[_sage_const_0 ].append(t)
			mag_func_output[_sage_const_1 ].append(j)

plt.plot(mag_func_output[_sage_const_0 ], mag_func_output[_sage_const_1 ], 'k.')
plt.savefig('m_plot.pdf')


