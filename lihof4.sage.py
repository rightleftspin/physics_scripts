

# This file was *autogenerated* from the file lihof4.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_5p53 = RealNumber('5.53'); _sage_const_5en2 = RealNumber('5e-2'); _sage_const_2p34 = RealNumber('2.34'); _sage_const_0p6717 = RealNumber('0.6717'); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_11p5 = RealNumber('11.5'); _sage_const_2 = Integer(2); _sage_const_0p01 = RealNumber('0.01'); _sage_const_3 = Integer(3); _sage_const_1p25 = RealNumber('1.25'); _sage_const_1 = Integer(1); _sage_const_5en4 = RealNumber('5e-4')
from sage.all import *
import numpy as np
from sympy import lambdify, sympify
import sympy
import scipy as sp
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
def printa(thing_to_print):
	print(ascii_art(thing_to_print))

delta, g_l, mu_b, B_x, alpha, rho, beta = var('delta g_l mu_b B_x alpha rho beta', domain='positive')

jz_m, jx_m, jy_m = var('jz_m jx_m jy_m', domain='positive')

wx, wz = var('wx wz', domain='real')

jz = Matrix(((-alpha, _sage_const_0 , _sage_const_0 ), (_sage_const_0 , alpha, _sage_const_0 ), (_sage_const_0 , _sage_const_0 , _sage_const_0 )))
jx = Matrix(((_sage_const_0 , _sage_const_0 , rho), (_sage_const_0 , _sage_const_0 , rho), (rho, rho, _sage_const_0 )))
jy = Matrix(((_sage_const_0 , _sage_const_0 , -I * rho), (_sage_const_0 , _sage_const_0 , I * rho), (I * rho, -I * rho, _sage_const_0 )))

v_c = Matrix(((_sage_const_0 , _sage_const_0 , _sage_const_0 ), (_sage_const_0 , _sage_const_0 , _sage_const_0 ), (_sage_const_0 , _sage_const_0 , delta)))

full_hamil = v_c + -mu_b * g_l * B_x * jx + wx * jx_m * jx + wx * jy_m * jy + wz * jz_m * jz

jy_m = _sage_const_0 
alpha = _sage_const_5p53  
wz = -_sage_const_5en2  
rho = _sage_const_2p34  
mu_b = _sage_const_0p6717 
g_l = _sage_const_5 /_sage_const_4 
delta = _sage_const_11p5 

full_hamil = full_hamil.substitute(jy_m = jy_m, alpha = alpha, wz = wz, rho = rho, mu_b = mu_b, g_l = g_l, delta = delta)

####################
# B_x = 0 
#B_x = 0 
#wx = 0
#hamil = full_hamil.substitute(B_x = B_x, wx = wx)
#hamil_exp = exp(-beta * hamil)
#
#Z = hamil_exp.trace()
#mag = (1/Z) * (((jz.substitute(alpha = alpha) * hamil_exp).trace()))
#
## Convert to numpy callable
#mag_func = fast_callable(mag - jz_m, vars=[jz_m, beta])
#
#step = 0.001
#temp, jz_m = np.meshgrid(srange(step, 2, step), srange(0.01, 6, step))
#
#mag_out = mag_func(jz_m, 1/temp)
#
#matching_mask = (abs(mag_out) < 1e-4)
#
#mag_func_output = [temp[matching_mask], jz_m[matching_mask]]
#
#plt.plot(mag_func_output[0], mag_func_output[1], 'k.')
#plt.xlabel("T (K)")
#plt.ylabel("m")
#plt.title("<j_z> @ B_x=0")
#plt.savefig('j_z_b_0.pdf')

####################
# B_x = 2 
B_x = _sage_const_2  
wx = _sage_const_0 

hamil = -beta * full_hamil.substitute(B_x = B_x, wx = wx)

step = _sage_const_0p01 
jz_m_array, temp_array = srange(step, _sage_const_3 , step), srange(step, _sage_const_1p25 , step)
jz_m_mesh, temp_mesh = np.meshgrid(jz_m_array, temp_array)
all_hamils = []

for temp in temp_array:
	row = []
	for jz_m in jz_m_array:
		row.append(hamil.substitute(beta=_sage_const_1 /temp, jz_m=jz_m))
	all_hamils.append(row)

all_hamils_exp = sp.linalg.expm(np.array(all_hamils))

mags_z = ((_sage_const_1 /np.einsum('...ii->...', all_hamils_exp)) * np.einsum('ij, lkji->lk', jz.substitute(alpha=alpha), all_hamils_exp))
mags_x = ((_sage_const_1 /np.einsum('...ii->...', all_hamils_exp)) * np.einsum('ij, lkji->lk', jx.substitute(rho=rho), all_hamils_exp))

mag_out = abs(mags_z - jz_m_mesh) < _sage_const_5en4 

plt.plot(temp_mesh[mag_out], jz_m_mesh[mag_out], 'k.', label='<j_z>')
plt.plot(temp_mesh[mag_out], mags_x[mag_out], 'r.', label='<j_x>')
plt.xlabel("T (K)")
plt.ylabel("m")
plt.title("<j_z> and <j_x> @ B_x=2")
plt.legend()
plt.savefig('j_z_b_2.pdf')

